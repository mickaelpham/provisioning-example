// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String          @id
  email      String          @unique
  name       String
  workspaces UserWorkspace[]
  billing    BillingProfile?
}

model Workspace {
  id          String           @id
  slug        String           @unique
  name        String
  users       UserWorkspace[]
  plan        SubscriptionPlan @default(FREEMIUM)
  memberships Int?
  invoices    Invoice[]
}

model UserWorkspace {
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
  userRole    UserRole

  @@id([userId, workspaceId])
}

enum UserRole {
  MEMBER
  ADMIN
  OWNER
}

enum SubscriptionPlan {
  FREEMIUM
  TEAM
  BUSINESS
  ENTERPRISE
}

enum Currency {
  EUR
  USD
}

model BillingProfile {
  externalId     String    @id
  user           User      @relation(fields: [userId], references: [id])
  userId         String    @unique
  currency       Currency  @default(USD)
  email          String?
  line1          String?
  line2          String?
  city           String?
  postalCode     String?
  country        String?
  invoices       Invoice[]
  cardExternalId String?   @unique
  cardBrand      String?
  cardExpMonth   Int?
  cardExpYear    Int?
  cardLast4      String?
}

model Invoice {
  externalId        String         @id
  billing           BillingProfile @relation(fields: [billingId], references: [externalId])
  billingId         String
  status            InvoiceStatus
  amountDueInCents  Int
  amoundPaidInCents Int
  currency          Currency       @default(USD)
  workspace         Workspace      @relation(fields: [workspaceId], references: [id])
  workspaceId       String
}

enum InvoiceStatus {
  DRAFT
  OPEN
  PAID
  UNCOLLECTIBLE
  VOID
  FULFILLED
}

model StripeEvent {
  externalId  String            @id
  type        String
  created     DateTime
  apiVersion  String?
  status      StripeEventStatus
  processedAt DateTime?

  @@index(created)
}

enum StripeEventStatus {
  PENDING
  PROCESSED
  SKIPPED
}
